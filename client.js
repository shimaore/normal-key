// Generated by CoffeeScript 2.4.1
(function() {
  // RedisClient
  // ===========

  // This is a base class, meant to be implemented in a child class that adds the `interface` field, which should be a RedisInterface instance.
  var RedisClient;

  RedisClient = class RedisClient {
    constructor(class_name, key) {
      this.class_name = class_name;
      this.key = key;
      if (this.class_name == null) {
        throw new Error("RedisClient expects class name as first parameter");
      }
      if (this.key == null) {
        throw new Error("RedisClient expects key as second parameter");
      }
      this.__property_key = `${this.class_name}-${this.key}-P`;
      this.__set_key = `${this.class_name}-${this.key}-S`;
      this.__zset_key = `${this.class_name}-${this.key}-Z`;
      this.__tag_key = `${this.class_name}-${this.key}-T`;
      this.__state_key = `${this.class_name}-${this.key}-s`;
    }

    // State
    // -----
    transition_state(old_value, new_value) {
      return this.interface.transition(this.__state_key, old_value, new_value);
    }

    state() {
      return this.interface.redis.get(this.__state_key);
    }

    // Properties
    // ----------
    get(property) {
      return this.interface.get(this.__property_key, property);
    }

    set(property, value) {
      return this.interface.set(this.__property_key, property, value);
    }

    reset(property) {
      return this.set(property, 0);
    }

    incr(property, increment = 1) {
      return this.interface.incr(this.__property_key, property, increment);
    }

    // Set
    // ---
    add(value) {
      return this.interface.add(this.__set_key, value);
    }

    remove(value) {
      return this.interface.remove(this.__set_key, value);
    }

    has(value) {
      return this.interface.has(this.__set_key, value);
    }

    count() {
      return this.interface.count(this.__set_key);
    }

    clear() {
      return this.interface.clear(this.__set_key);
    }

    forEach(cb) {
      return this.interface.forEach(this.__set_key, cb);
    }

    // Ordered-Set
    // ---
    sorted_add(value, score = 0) {
      return this.interface.sorted_add(this.__zset_key, value, score);
    }

    sorted_incr(value, delta = 1) {
      return this.interface.sorted_incr(this.__zset_key, value, delta);
    }

    sorted_remove(value) {
      return this.interface.sorted_remove(this.__zset_key, value);
    }

    sorted_has(value) {
      if (value != null) {
        return this.score(value) != null;
      }
    }

    score(value) {
      return this.interface.score(this.__zset_key, value);
    }

    sorted_count() {
      return this.interface.sorted_count(this.__zset_key);
    }

    sorted_forEach(cb) {
      return this.interface.sorted_forEach(this.__zset_key, cb);
    }

    // Tags
    // ----
    add_tag(tag) {
      return this.interface.add(this.__tag_key, tag);
    }

    add_tags(tags) {
      if (tags.length > 0) {
        return this.interface.add(this.__tag_key, tags);
      }
    }

    del_tag(tag) {
      return this.interface.remove(this.__tag_key, tag);
    }

    clear_tags() {
      return this.interface.clear(this.__tag_key);
    }

    tags() {
      return this.interface.members(this.__tag_key);
    }

    has_tag(tag) {
      return this.interface.has(this.__tag_key, tag);
    }

  };

  module.exports = RedisClient;

}).call(this);
